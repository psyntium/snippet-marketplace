delta,snum,s_topic,description,document_url,s_creator_user_id,s_code_language,env_kind,s_content_type,code_url,code_identifier,product_url,product_image_url,is_runnable,is_deployable,is_docker,s_updated_yyyy,s_updated_mm,updated_day_yyyy_mm_dd
,1,watson,Do Facial Recognition on public personalities,"<p class=""intro readable"">Visual Recognition <br /><br /> understands the contents of images - visual concepts tag the image, recognize food, find human faces, approximate age and gender, and find similar images in a collection. You can also train the service by creating your own custom concepts. Use Visual Recognition to detect a dress type in retail, identify spoiled fruit in inventory, and more.</p>",9999,java,java,code,https://github.com/snippet-java/snippet-marketplace/blob/master/java/facial-recognition.java,facial-recognition.java,,,,,,2017,6,2017_06_27
,2,starter,Simple App that helps understand OW,"<div id="""" class=""pn-brick pn-p5 pn-bg-white pn-r5 pn-tac"" style="""">     <h1 style=""padding-top:20px"">Overview</h1>        <p style=""text-align:left;"">OpenWhisk provides a distributed compute service to execute application logic in response to events.  There are several key architectural concepts:</p>     <ul style=""text-align:left;"">     <li><strong>Triggers:</strong> A class of events emitted by event sources.</li>     <li><strong>Actions:</strong> Encapsulate the actual code to be executed which support multiple language bindings including NodeJS, Swift and arbitrary binary programs encapsulated in Docker Containers.  Actions invoke any part of an open ecosystem including existing Bluemix services for analytics, data, cognitive, or any other 3rd party service.</li>     <li><strong>Rules:</strong> An association between a trigger and an action.</li>     <li><strong>Packages:</strong> Describe external services in a uniform manner.</li>     <p style=""text-align:left;"">Combined these allow developers to compose solutions using modern abstraction and chaining which can be created, accessed, updated and deleted via the CLI.  For convenience, special SDKs like our iOS SDK can be used for specific environments.</p>     </ul></div>",9999,js,nodejs:6,code,https://github.com/snippet-java/snippet-marketplace/blob/master/nodejs/a_simple_app.js,a-simple-node app.js,,,,,,2017,6,2017_06_27
,3,watson,Do Facial Recognition on public personalities,"<p> This code shows you how to use the node.js API for the Watson Visual                 Recognition service. Given an image, Watson looks for faces in that image                 and attempts to recognize each of those faces. </p><p> The code has two basic sections: </p><ol><li> The <code>main()</code> method. This is the entry point to the code.                     It creates the <code>VisualRecognitionV3</code> object and then                     invokes the <code>detectFaces()</code> method. </li><li> A set of default parameters and the code that runs this module if it                     is invoked by itself (as opposed to being invoked by a                     <code>require()</code> statement). See the <a href=""https://nodejs.org/api/modules.html#modules_accessing_the_main_module"">Node.js documentation</a> for more information on the                     implications of the <code>require.main === module</code> statement.                 </li></ol><p> This code takes a URL of an image file as input, looks for faces in                 that image, and attempts to recognize each of those faces. The call to the Watson                 Visual Recognition service is wrapped in a JavaScript <code>Promise</code>                 to handle the asynchronous nature of the service. See the <a href=""https://www.ibm.com/watson/developercloud/doc/visual-recognition/index.html"">overview of the Watson Visual Recognition service</a> or <a href=""https://github.com/watson-developer-cloud/node-sdk"">the GitHub                     repo for the Watson node.js API</a> for more information. </p><p> To identify other people, try these other values for <code>imageurl</code>: </p><ul class=""ibm-bullet-list""><li> Donald Trump: <a href=""https://www.whitehouse.gov/sites/whitehouse.gov/files/images/45/PE%20Color.jpg"">https://www.whitehouse.gov/sites/whitehouse.gov/files/images/45/PE%20Color.jpg</a></li><li> George W. Bush: <a href=""https://www.whitehouse.gov/sites/whitehouse.gov/files/images/first-family/43_george_w_bush.jpg"">https://www.whitehouse.gov/sites/whitehouse.gov/files/images/first-family/43_george_w_bush.jpg</a></li><li> Bill Clinton: <a href=""https://www.whitehouse.gov/sites/whitehouse.gov/files/images/first-family/42_bill_clinton.jpg"">https://www.whitehouse.gov/sites/whitehouse.gov/files/images/first-family/42_bill_clinton.jpg</a></li><li> Melania Trump: <a href=""https://www.whitehouse.gov/sites/whitehouse.gov/files/images/flotus.png"">https://www.whitehouse.gov/sites/whitehouse.gov/files/images/flotus.png</a></li></ul>",9999,js,nodejs:6,code,https://github.com/snippet-java/snippet-marketplace/blob/master/nodejs/facial-recognition.js,facial-recognition.js,,,,,,2017,6,2017_06_27
,4,starter,Simple App that helps understand OW,"This cannot be deployed, but only run",9999,js,nodejs:6,code,https://github.com/snippet-java/snippet-marketplace/blob/master/nodejs/a_first_app.js,a-first-app.js,,,,,,2017,6,2017_06_27
,5,watson,Understand how to classify images,"<p> This code shows you how to use the node.js API for the Watson Visual                 Recognition service. Given an image, Watson attempts to identify objects                 in that image. </p><p> The code has two basic sections: </p><ol><li> The <code>main()</code> method. This is the entry point to the code.                     It creates the <code>VisualRecognitionV3</code> object and then                     invokes the <code>classify()</code> method. </li><li> A set of default parameters and the code that runs this module if it                     is invoked by itself (as opposed to being invoked by a                     <code>require()</code> statement). See the <a href=""https://nodejs.org/api/modules.html#modules_accessing_the_main_module"">Node.js documentation</a> for more information on the                     implications of the <code>require.main === module</code> statement.                 </li></ol><p> This code takes a URL of an image file as input and looks for objects in                 that image. The call to the Watson Visual Recognition service is wrapped                 in a JavaScript <code>Promise</code> to handle the asynchronous nature of                 the service. See the <a href=""https://www.ibm.com/watson/developercloud/doc/visual-recognition/index.html"">overview of the Visual Recognition service</a> or <a href=""https://github.com/watson-developer-cloud/node-sdk"">the GitHub                      repo for the Watson node.js API</a> for more information. </p><p> To see what else Watson can identify, try these other values for                 <code>imageurl</code>: </p><ul class=""ibm-bullet-list""><li> A cat: <a href=""https://upload.wikimedia.org/wikipedia/commons/thumb/4/4d/Cat_November_2010-1a.jpg/449px-Cat_November_2010-1a.jpg"">https://upload.wikimedia.org/wikipedia/commons/thumb/4/4d/Cat_November_2010-1a.jpg/449px-Cat_November_2010-1a.jpg</a></li><li> A school bus: <a href=""https://upload.wikimedia.org/wikipedia/commons/f/f3/Laidlaw_school_bus.jpg"">https://upload.wikimedia.org/wikipedia/commons/f/f3/Laidlaw_school_bus.jpg</a></li><li> A pizza: <a href=""https://upload.wikimedia.org/wikipedia/commons/thumb/d/d1/Pepperoni_pizza.jpg/800px-Pepperoni_pizza.jpg"">https://upload.wikimedia.org/wikipedia/commons/thumb/d/d1/Pepperoni_pizza.jpg/800px-Pepperoni_pizza.jpg</a></li></ul>",9999,js,nodejs:6,code,https://github.com/snippet-java/snippet-marketplace/blob/master/nodejs/image-classification.js,image-classification.js,,,,,,2017,6,2017_06_27
,6,watson,Translate from one Language to another,"<p> This code shows you how to use the node.js API for the Watson Language                 Translator service. Given some text, a source language, and a target                 language, Watson translates that text and returns one or more translations                 to you. </p><p> The code has five basic sections: </p><ol><li> The <code>main()</code> method. This is the entry point to the code.                     It creates the <code>LanguageTranslationV2</code> object and then                     invokes the three translation functions. </li><li> The <code>englishToFrench()</code> function. This takes text and a                     <code>LanguageTranslationV2</code> object as its inputs and calls the                     Language Translator service to convert the input from English                     into French. </li><li> The <code>frenchToSpanish()</code> function. This converts French                     text into Spanish. </li><li> The <code>spanishToEnglish()</code> function converts Spanish to                     English. </li><li> A set of default parameters and the code that runs this module if it                     is invoked by itself (as opposed to being invoked by a                     <code>require()</code> statement). See the <a href=""https://nodejs.org/api/modules.html#modules_accessing_the_main_module"">node.js documentation</a> for more information on the                     implications of the <code>require.main === module</code> statement.                 </li></ol><p> This code takes a string as input and translates the string from English                 to French, from French to Spanish, and finally from Spanish into English                 again. The calls to the Watson Language Translator service are                 wrapped in JavaScript <code>Promise</code>s to handle the asynchronous                 nature of the service. </p><p>See the <a href=""https://www.ibm.com/watson/developercloud/language-translator.html"">overview of the Language Translator service</a> or <a href=""https://github.com/watson-developer-cloud/node-sdk"">the github                     repo for the Watson node.js API</a> for more information. </p><p> Try                         changing the <code>textToTranslate</code> parameter or the                         language codes to see what happens. </p>",9999,js,nodejs:6,code,https://github.com/snippet-java/snippet-marketplace/blob/master/nodejs/language-translation.js,language-translation.js,,,,,,2017,7,2017_07_20
,7,watson,Classify words based on Training (Machine Learning),"<p> This code shows you how to use the node.js API for the Watson natural                 language classification service. Given some text and a context, Watson                 analyzes the text and returns a list of categories relevant to that                 text.</p><p> The code has two basic sections: </p><ol><li> The <code>main()</code> method. This is the entry point to the code.                     It creates the <code>NaturalLanguageClassifierV1</code> object and                     then invokes the <code>classify()</code> method. </li><li> A set of default parameters and the code that runs this module if it                     is invoked by itself (as opposed to being invoked by a                     <code>require()</code> statement). See <a href=""https://nodejs.org/api/modules.html#modules_accessing_the_main_module"">the node.js documentation</a> for more information on the                     implications of the <code>require.main === module</code> statement.                 </li></ol><p> This code takes a string as input and classifies          it based on the ID of a                 classification context previously defined in Bluemix. The call to the                 Watson Natural Language Classifier service is wrapped in a JavaScript                 <code>Promise</code> to handle the asynchronous nature of the service.                 See <a href=""https://www.ibm.com/watson/developercloud/nl-classifier.html"">the overview of the Natural Language Classifier service</a> or                     <a href=""https://github.com/watson-developer-cloud/node-sdk"">the                     github repo for the Watson node.js API</a> for more information. </p><p> Try changing the text to see what happens. </p>",9999,js,nodejs:6,code,https://github.com/snippet-java/snippet-marketplace/blob/master/nodejs/natural-language-classifier.js,natural-language-classifier.js,,,,,,2017,7,2017_07_20
,8,watson,Get Insight into the Personality described in a passage,"<p> This code shows you how to use the node.js API for the Watson Personality                 Insights service. Given some text, Watson analyzes the openness,                 conscientiousness, extraversion, agreeableness, emotional range, and needs                 of the speaker. </p><p> The code has two basic sections: </p><ol><li> The <code>main()</code> method. This is the entry point to the code.                     It creates the <code>PersonalityInsightsV3</code> object and then                     invokes the <code>profile()</code> method. </li><li> A set of default parameters and the code that runs this module if it                     is invoked by itself (as opposed to being invoked by a                     <code>require()</code> statement). See <a href=""https://nodejs.org/api/modules.html#modules_accessing_the_main_module"">the node.js documentation</a> for more information on the                     implications of the <code>require.main === module</code> statement.                 </li></ol><p> This code takes a string as input and analyzes the personality of the                 speaker. The call to the Watson Personality Insights service is wrapped in                 a JavaScript <code>Promise</code> to handle the asynchronous nature of the                 service.</p><p>See the <a href=""https://www.ibm.com/watson/developercloud/personality-insights.html"">overview of the Personality Insights service</a> or the <a href=""https://github.com/watson-developer-cloud/node-sdk"">github                     repo for the Watson node.js API</a> for more information. </p><p> Try changing the text to see what happens. </p>",9999,js,nodejs:6,code,https://github.com/snippet-java/snippet-marketplace/blob/master/nodejs/personality-insights.js,personality-insights.js,,,,,,2017,7,2017_07_20
,9,watson,Analyze the Tone of the passage or sentences,"<p> This code shows you how to use the node.js API for the Watson Tone                 Analyzer service. Given some text, Watson evaluates the tone, looking for                 qualities such as the speaker's levels of anger, disgust, joy, fear, and                 sadness. </p><p> The code has two basic sections: </p><ol><li> The <code>main()</code> method. This is the entry point to the code.                     It creates the <code>ToneAnalyzerV3</code> object and then invokes the                     <code>tone()</code> method. </li><li> A set of default parameters and the code that runs this module if it                     is invoked by itself (as opposed to being invoked by a                     <code>require()</code> statement). See <a href=""https://nodejs.org/api/modules.html#modules_accessing_the_main_module"">the node.js documentation</a> for more information on the                     implications of the <code>require.main === module</code> statement.                 </li></ol><p> This code takes a string as input and analyzes the tone of the text. The                 call to the Watson Tone Analyzer service is wrapped in a JavaScript                 <code>Promise</code> to handle the asynchronous nature of the service. See                     <a href=""https://www.ibm.com/watson/developercloud/tone-analyzer.html"">the overview of the Tone Analyzer service</a> or <a href=""https://github.com/watson-developer-cloud/node-sdk"">the github                     repo for the Watson node.js API</a> for more information. </p><p> Try changing the text to see what happens. </p>",9999,js,nodejs:6,code,https://github.com/snippet-java/snippet-marketplace/blob/master/nodejs/tone-analysis.js,tone-analysis.js,,,,,,2017,7,2017_07_20
,10,watson,Translate from one Language to another,"<p>This code shows you how to use the Java API for                     the Watson language translator service. Given some text, a source                     language, and a target language, Watson translates that text and                     returns one or more translations to you.</p><p> The code has three basic sections: </p><ol><li> Default values for the parameters. These are always used by the                     <code>public static void main(String[] args)</code> method. If the                     call to <code>public static JsonObject main(JsonObject args)</code>                     has no parameters or the wrong number of parameters, the default                     values are also used there. </li><li> The <code>public static void main(String[] args)</code> method. This                     uses a <code>JsonParser</code> to convert the default parameters into                     a JSON object, then it calls... </li><li> ...The <code>public static JsonObject main(JsonObject args)</code>                     method. This is the method OpenWhisk invokes once the code is deployed                     as an OpenWhisk action. </li></ol><p> Lines 55-66 illustrate the Java API for the service. The Watson SDK wraps                 the JSON returned by the service as a set of objects that are easy to work                 with in Java. Notice that it is possible for a translation to return                 multiple results. If Watson returns only one result, that's the only one                 the code displays. See <a href=""https://www.ibm.com/watson/developercloud/language-translator.html"">the                     overview of the Language Translator service</a> or <a href=""https://github.com/watson-developer-cloud/java-sdk/tree/develop/language-translator"">the github repo for the Java API</a> for more information. </p><p> Try changing the text or the languages to see what happens. </p>",9999,java,java,code,https://github.com/snippet-java/snippet-marketplace/blob/master/java/LanguageTranslation.java,LanguageTranslation.java,,,,,,2017,7,2017_07_20
,11,watson,Classify words based on Training (Machine Learning),"<p> This code shows you how to use the Java API for the Watson natural                 language classification service. Given some text and a context, Watson                 analyzes the text and returns a list of categories relevant to that text. </p><p> The code has three basic sections: </p><ol><li> Default values for the parameters. These are always used by the                     <code>public static void main(String[] args)</code> method. If the                     call to <code>public static JsonObject main(JsonObject args)</code>                     has no parameters or the wrong number of parameters, the default                     values are also used there. </li><li> The <code>public static void main(String[] args)</code> method. This                     uses a <code>JsonParser</code> to convert the default parameters into                     a JSON object, then it calls... </li><li> ...The <code>public static JsonObject main(JsonObject args)</code>                     method. This is the method OpenWhisk invokes once the code is deployed                     as an OpenWhisk action. </li></ol><p> Lines 47-56 illustrate the Java API for the service. The Watson SDK wraps                 the JSON returned by the service as a set of objects that are easy to work                 with in Java. The results include the most likely classification (accessed                 via the <code>topClass()</code> method) and a list of all classifications                 that might be relevant. See the <a href=""https://www.ibm.com/watson/developercloud/nl-classifier.html"">overview                      of the Watson Natural Language Classifier service</a> or the                     <a href=""https://github.com/watson-developer-cloud/java-sdk/tree/develop/natural-language-classifier"">github                          repo for the Java API</a> for more information. </p><p> See what else Watson can do. Change the text                              to see what happens. </p>",9999,java,java,code,https://github.com/snippet-java/snippet-marketplace/blob/master/java/LanguageClassifier.java,LanguageClassifier.java,,,,,,2017,7,2017_07_20
,12,watson,Get Insight into the Personality described in a passage,"<p>This code shows you how to use the Java API for the                     Watson Personality Insights service. Given some text, Watson analyzes                     the openness, conscientiousness, extraversion, agreeableness,                     emotional range, and needs of the speaker.</p><p> The code has three basic sections: </p><ol><li> Default values for the parameters. These are always used by the                     <code>public static void main(String[] args)</code> method. If the                     call to <code>public static JsonObject main(JsonObject args)</code>                     has no parameters or the wrong number of parameters, the default                     values are used there as well. </li><li> The <code>public static void main(String[] args)</code> method. This                     uses a <code>JsonParser</code> to convert the default parameters into                     a JSON object, then it calls... </li><li> ...The <code>public static JsonObject main(JsonObject args)</code>                     method. This is the method OpenWhisk invokes once the code is deployed                     as an OpenWhisk action. </li></ol><p> Lines 69-88 illustrate the Java API for the service. The results include a                 comment from Watson about the text along with the personality data Watson                 inferred from it. The Watson SDK wraps the JSON returned by the service as                 a set of objects that are easy to work with in Java. See the <a href=""https://www.ibm.com/watson/developercloud/personality-insights.html"">overview of the Watson Personality Insights service</a> or the <a href=""https://github.com/watson-developer-cloud/java-sdk/tree/develop/personality-insights"">github                         repo for the Java API</a> for more information. </p><p>Try changing the text to see what happens.</p>",9999,java,java,code,https://github.com/snippet-java/snippet-marketplace/blob/master/java/GetInsights.java,GetInsights.java,,,,,,2017,7,2017_07_20
,13,watson,Analyze the Tone of the passage or sentences,"<p> This code shows you how to use the Java API for the Watson tone analysis                 service. Given some text, Watson evaluates the tone, looking for qualities                 such as the speaker's levels of anger, disgust, joy, fear, and sadness. </p><p> The code has three basic sections: </p><ol><li> Default values for the parameters. These are always used by the                     <code>public static void main(String[] args)</code> method. If the                     call to <code>public static JsonObject main(JsonObject args)</code>                     has no parameters or the wrong number of parameters, the default                     values are used there as well. </li><li> The <code>public static void main(String[] args)</code> method. This                     uses a <code>JsonParser</code> to convert the default parameters into                     a JSON object, then it calls... </li><li> ...the <code>public static JsonObject main(JsonObject args)</code>                     method. This is the method OpenWhisk invokes once the code is deployed                     as an OpenWhisk action. </li></ol><p> Lines 58-68 illustrate the Java API for the service. The Watson SDK wraps                 the JSON returned by the service as a set of objects that are easy to work                 with in Java. The results indicate the emotional, language, and social                 tones for the entire document. You can also get the analysis for each                 sentence in the document. See <a href=""https://www.ibm.com/watson/developercloud/tone-analyzer.html"">the overview of the Tone Analyzer service</a> or <a href=""https://github.com/watson-developer-cloud/java-sdk/tree/develop/tone-analyzer"">the github repo for the Java API</a> for more information. </p><p>Try changing the text to see what happens.</p>",9999,java,java,code,https://github.com/snippet-java/snippet-marketplace/blob/master/java/CheckTheTone.java,CheckTheTone.java,,,,,,2017,7,2017_07_20
,14,watson,Integrate Alexa,This code shows you how to Integrate Alexa. More information at https://github.com/snippet-java/snippet-marketplace/blob/master/nodejs/integrate_alexa.md,9999,java,java,code,https://github.com/snippet-java/snippet-marketplace/blob/master/java/IntegrateAlexa.java,IntegrateAlexa.java,,,,,,2017,7,2017_07_20
,15,starter,Simple App that helps understand OW,"<div id="""" class=""pn-brick pn-p5 pn-bg-white pn-r5 pn-tac"" style="""">     <h1 style=""padding-top:20px"">Overview</h1>        <p style=""text-align:left;"">OpenWhisk provides a distributed compute service to execute application logic in response to events.  There are several key architectural concepts:</p>     <ul style=""text-align:left;"">     <li><strong>Triggers:</strong> A class of events emitted by event sources.</li>     <li><strong>Actions:</strong> Encapsulate the actual code to be executed which support multiple language bindings including NodeJS, Swift and arbitrary binary programs encapsulated in Docker Containers.  Actions invoke any part of an open ecosystem including existing Bluemix services for analytics, data, cognitive, or any other 3rd party service.</li>     <li><strong>Rules:</strong> An association between a trigger and an action.</li>     <li><strong>Packages:</strong> Describe external services in a uniform manner.</li>     <p style=""text-align:left;"">Combined these allow developers to compose solutions using modern abstraction and chaining which can be created, accessed, updated and deleted via the CLI.  For convenience, special SDKs like our iOS SDK can be used for specific environments.</p>     </ul></div>",9999,java,java,code,https://github.com/snippet-java/snippet-marketplace/blob/master/java/a_simple_app.java,a_simple_app.java,,,,,,2017,6,2017_06_27
,16,starter,Simple App that helps understand OW,"This cannot be deployed, but only run",9999,java,java,code,https://github.com/snippet-java/snippet-marketplace/blob/master/java/a_first_app.java,a_first_app.java,,,,,,2017,6,2017_06_27